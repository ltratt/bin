#!/usr/bin/env python

# Copyright (C)2008-2011 Laurence Tratt <http://tratt.net/laurie/>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


# This utility runs a command a user-specified number of times, and prints
# the timing means (averages), medians, and standard deviations having done
# so. It is a low-tech way of timing things while still providing some
# assurance that a) occasional usage spikes by other processes / users are
# not unduly distorting results b) if such spikes are frequent, distortions
# in the data can be spotted.
#
# If "-s" is specified, multitime reads in data from stdin until EOF, and
# then passes that same data to each command that is run. If "-s" is not
# specified, each command may read different data from stdin.


import getopt, math, subprocess, sys



def usage():
    sys.stderr.write("multitime [-s] <num_runs> <command> [<command args>]\n")
    sys.exit(1)

opts, args = getopt.getopt(sys.argv[1:], "s")
	
read_stdin = False
for opt in opts:
	if opt[0] == "-s":
		read_stdin = True
	else:
		self.usage("Error: Unknown arg '%s'" % opt[0])

if len(args) < 2:
	self.usage("Insufficient number of args")

try:
    num_runs = int(args[0])
except ValueError:
    usage()

if num_runs <= 0:
    usage()

if read_stdin:
    stdin_data = sys.stdin.read()
else:
    stdin_data = None

cmd = ["/usr/bin/time", "-p"] + args[1:]

all_reals = []
all_users = []
all_syss = []

for i in range(1, num_runs + 1):
    process = subprocess.Popen(cmd, stdin=subprocess.PIPE, \
      stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    if stdin_data is None:
        _, stderr = process.communicate()
    else:
        _, stderr = process.communicate(stdin_data)

    if process.returncode != 0:
        sys.stderr.write(stderr)
        sys.stderr.write( \
          "%s exited with a non-zero return code on run #%d. Exiting." % \
          (args[1], i))
        sys.exit(process.returncode)
    else:
        # time's formatted output is fixed by POSIX -p option, so this is safe.
        times = stderr.split('\n')
        all_reals.append(float(times[0][5:]))
        all_users.append(float(times[1][5:]))
        all_syss.append(float(times[2][4:]))

mn_realc = 0
mn_userc = 0
mn_sysc = 0
for i in range(num_runs):
	mn_realc += all_reals[i]
	mn_userc += all_users[i]
	mn_sysc += all_syss[i]
mn_real = mn_realc / num_runs
mn_user = mn_userc / num_runs
mn_sys = mn_sysc / num_runs

sd_realc = 0
sd_userc = 0
sd_sysc = 0
for i in range(num_runs):
    sd_realc += math.pow(all_reals[i] - mn_real, 2)
    sd_userc += math.pow(all_users[i] - mn_user, 2)
    sd_sysc += math.pow(all_syss[i] - mn_sys, 2)
sd_real = math.sqrt(sd_realc / num_runs)
sd_user = math.sqrt(sd_userc / num_runs)
sd_sys = math.sqrt(sd_sysc / num_runs)

all_reals.sort()
all_users.sort()
all_syss.sort()

if num_runs % 2 == 0:
    i = num_runs // 2 - 1
    j = num_runs // 2
    md_real = (all_reals[i] + all_reals[j]) / 2
    md_user = (all_users[i] + all_users[j]) / 2
    md_sys = (all_syss[i] + all_syss[j]) / 2
else:
    i = num_runs // 2
    md_real = all_reals[i]
    md_user = all_users[i]
    md_sys = all_syss[i]

print("Mins:      real %.3f user %.3f sys %.3f" % (all_reals[0], all_users[0], all_syss[0]))
print("Maxs:      real %.3f user %.3f sys %.3f" % (all_reals[-1], all_users[-1], all_syss[-1]))
print("Means:     real %.3f user %.3f sys %.3f" % (mn_real, mn_user, mn_sys))
print("Std. devs: real %.3f user %.3f sys %.3f" % (sd_real, sd_user, sd_sys))
print("Medians:   real %.3f user %.3f sys %.3f" % (md_real, md_user, md_sys))
