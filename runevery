#! /bin/sh

# Copyright (C)2014 Laurence Tratt <http://tratt.net/laurie/>
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# runevery [-d <count dir>] <count1> <cmd1> [... <countn> <cmdn>]
# Every time this utility is called it executes one of cmd1 ... cmdn. It
# selects the command by remembering how many times this particular sequence
# of commands has been called. First, cmd1 is executed countn times; cmd2 (if it
# exists) count2 times; and cmdn countn times. It then cycles back to the
# beginning.


# A list of possible hash commands. There is no consistency across Unices as to
# what these are called, nor their command line parameters. In practise, we seem
# to be able to get away with piping a string in via stdin and truncating the
# hash to something of half-reasonable length.

HASH_CMDS="sha256 sha256sum md5 md5sum"


# See if we can find a usable hash command

hash_cmd=""
for cnd_hash_cmd in $HASH_CMDS; do
    which $cnd_hash_cmd >/dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
        hash_cmd=$cnd_hash_cmd
        break
    fi
done
if [ "$hash_cmd" = "" ]; then
    echo "No usable hash command found. Install sha256 / md5." >&2
    exit 1
fi


usage() {
    echo "Usage: runevery [-d <count dir>] <count1> <cmd1> [... <countn> <cmdn>]" >&2
    exit 1
}

countdir="/var/tmp/"
while getopts ":hd:" f
do
    case "$f" in
        d)   countdir="$OPTARG";;
        h)   usage;;
        [?]) usage;;
    esac
done

# Since commands come in (count, cmd) pairs, they must be an even number
shift $((OPTIND-1))
if [ $(($# % 2)) -ne 0 ]; then
    usage
fi

numcmds=$(($# / 2))
counttotal=0
cmdi=0
while [ $# -gt 0 ]; do 
    counts[cmdi]=`expr $1`
    if [ $? -gt 1 ]; then
        usage
    fi
	cmds[cmdi]=$2
    counttotal=$((counttotal + ${counts[cmdi]}))
    cmdi=$((cmdi + 1))
	shift
    shift
done


# Work out where the count file is (or should be)

concat=""
i=0
while [ i -lt $numcmds ]; do
    concat="$concat${counts[i]}${cmds[i]}"
    i=$((i + 1))
done
countp=/var/tmp/runevery.`echo $concat | $hash_cmd | cut -c 1-16`
if [ ! -f $countp ]; then
    cur=0
else
    cur=$((`head -n 1 $countp` + 1))
fi

if [ $cur -ge $counttotal ]; then
    # We've wrapped
    cur=0
fi


# Execute the appropriate command

i=0
count=0
while [ i -lt $numcmds ]; do
    nextcount=$((count + ${counts[i]}))
    if [ $cur -lt $nextcount ]; then
        ${cmds[i]}
        break
    fi
    count=$nextcount
    i=$((i + 1))
done

echo $cur > $countp

